{"version":3,"sources":["components/Search.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Search","Input","SearchImage","useState","loading","setLoading","allImgs","setAllImgs","displayImgs","setDispalyImgs","loadMore","length","style","textAlign","marginTop","height","lineHeight","onClick","moreImgs","slice","splice","concat","window","dispatchEvent","Event","className","placeholder","onSearch","value","message","warning","axios","get","params","text","then","res","status","data","photos","photo","tmpImgs","forEach","element","farm","server","id","secret","title","imgPath","generateImgUrl","push","path","catch","err","console","error","width","itemLayout","grid","gutter","column","dataSource","renderItem","item","Item","alt","src","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4VAKQA,EAAWC,IAAXD,OA0GOE,EA3F8B,WAAoB,IAAD,EAC9BC,oBAAkB,GADY,mBACrDC,EADqD,KAC5CC,EAD4C,OAE9BF,mBAAuB,IAFO,mBAErDG,EAFqD,KAE5CC,EAF4C,OAGtBJ,mBAAuB,IAHD,mBAGrDK,EAHqD,KAGxCC,EAHwC,KAoDtDC,EAAWJ,EAAQK,OACrB,yBACIC,MAAO,CACHC,UAAW,SACXC,UAAW,GACXC,OAAQ,GACRC,WAAY,SAGpB,kBAAC,IAAD,CAAQC,QAnBa,WACrB,GAAIX,EAAQK,OAAQ,CAChB,IAAMO,EAAWZ,EAAQa,MAAM,EAzDnB,IA0DZb,EAAQc,OAAO,EA1DH,IA2DZb,EAAWD,GACXG,EAAeD,EAAYa,OAAOH,IAClCI,OAAOC,cAAc,IAAIC,MAAM,cAanC,iBAEA,KAEJ,OACI,yBAAKC,UAAU,QACX,kBAACzB,EAAD,CACIyB,UAAU,cACVC,YAAY,oBACZC,SAjEW,SAACC,GAChBA,EAAMjB,QAAU,EAChBkB,IAAQC,QAAQ,8BAGpBzB,GAAW,GAEX0B,IAAMC,IAvBK,wJAuBW,CAAEC,OAAQ,CAAEC,KAAMN,KACnCO,MAAK,SAACC,GACH,GAAmB,MAAfA,EAAIC,QAAkBD,EAAIE,KAAKC,QAAUH,EAAIE,KAAKC,OAAOC,MAAM7B,OAAQ,CACvE,IAAM8B,EAAwB,GAY9B,GAXkBL,EAAIE,KAAKC,OAAOC,MAExBE,SAAQ,SAACC,GAAkB,IACzBC,EAAoCD,EAApCC,KAAMC,EAA8BF,EAA9BE,OAAQC,EAAsBH,EAAtBG,GAAIC,EAAkBJ,EAAlBI,OAAQC,EAAUL,EAAVK,MAC5BC,EAxBP,SAACL,EAAcC,EAAgBC,EAAYC,GAC9D,MAAO,cAAgBH,EAAhB,sBAA+CC,EAA/C,IAA8DC,EAA9D,IAAyEC,EAAzE,OAuB6BG,CAAeN,EAAMC,EAAQC,EAAIC,GACjDN,EAAQU,KAAK,CACTH,MAAOA,EACPI,KAAMH,OAIVR,EAAQ9B,OAAQ,CAChB,IAAMO,EAAWuB,EAAQtB,MAAM,EAzC/B,IA0CAsB,EAAQrB,OAAO,EA1Cf,IA2CAb,EAAWkC,GACXhC,EAAeS,GACfb,GAAW,GAEfA,GAAW,OAGlBgD,OAAM,SAACC,GACJC,QAAQC,MAAMF,QAiCd1C,MAAO,CAAE6C,MAAO,OAEpB,kBAAC,IAAD,CACIhC,UAAU,gBACVrB,QAASA,EACTM,SAAUA,EACVgD,WAAW,aACXC,KAAM,CAAEC,OAAQ,GAAIC,OAAQ,GAC5BC,WAAYtD,EACZuD,WAAY,SAACC,GAAD,OACR,kBAAC,IAAKC,KAAN,KACI,yBAAKC,IAAKF,EAAKhB,MAAOS,MAAO,IAAKU,IAAKH,EAAKZ,aCzFrDgB,MARf,WACE,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,QCIc4C,QACW,cAA7B/C,OAAOgD,SAASC,UAEe,UAA7BjD,OAAOgD,SAASC,UAEhBjD,OAAOgD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEd7B,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAM3B,c","file":"static/js/main.987ddf49.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Seach.less';\n\nimport axios from 'axios';\nimport { Button, Input, List, message } from 'antd';\nconst { Search } = Input;\n\nconst perPageImgCount = 16;  // 4 * 4\n// const flickrAPI = 'https://goo.gl/BtPbZW';  // blocked by CORS\nconst flickrAPI2 = 'https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=3e7cc266ae2b0e0d78e279ce8e361736&format=json&nojsoncallback=1&safe_search=1';\n\ntype DislayType = {\n    title: string,\n    path: string\n}\n\nconst generateImgUrl = (farm: string, server: string, id: string, secret: string) => {\n    return `http://farm` + farm + `.static.flickr.com/` + server + `/` + id + `_` + secret + `.jpg`;\n}\n\nconst SearchImage: React.FunctionComponent = (): JSX.Element => {\n    const [loading, setLoading] = useState<boolean>(false);\n    const [allImgs, setAllImgs] = useState<DislayType[]>([]);          // the filtered images\n    const [displayImgs, setDispalyImgs] = useState<DislayType[]>([]);  // display on the current page\n\n    const onSearchHandle = (value: string) => {\n        if (value.length <= 0) {\n            message.warning('Enter something firstly ~');\n            return;\n        }\n        setLoading(true);\n\n        axios.get(flickrAPI2, { params: { text: value } })\n            .then((res) => {\n                if (res.status === 200 && res.data.photos && res.data.photos.photo.length) {\n                    const tmpImgs: DislayType[] = [];\n                    const photoMeta = res.data.photos.photo;\n\n                    photoMeta.forEach((element: any) => {\n                        const { farm, server, id, secret, title } = element;\n                        const imgPath = generateImgUrl(farm, server, id, secret);\n                        tmpImgs.push({\n                            title: title,\n                            path: imgPath\n                        });\n                    });\n                    \n                    if (tmpImgs.length) {\n                        const moreImgs = tmpImgs.slice(0, perPageImgCount);\n                        tmpImgs.splice(0, perPageImgCount)\n                        setAllImgs(tmpImgs);\n                        setDispalyImgs(moreImgs);\n                        setLoading(false);\n                    }\n                    setLoading(false);\n                }\n            })\n            .catch((err) => {\n                console.error(err)\n            });\n    }\n\n    const onLoadMoreHandle = () => {\n        if (allImgs.length) {\n            const moreImgs = allImgs.slice(0, perPageImgCount);\n            allImgs.splice(0, perPageImgCount)\n            setAllImgs(allImgs);\n            setDispalyImgs(displayImgs.concat(moreImgs));\n            window.dispatchEvent(new Event('resize'));\n        }\n    }\n\n    const loadMore = allImgs.length ? (\n        <div\n            style={{\n                textAlign: 'center',\n                marginTop: 12,\n                height: 32,\n                lineHeight: '32px',\n            }}\n        >\n        <Button onClick={onLoadMoreHandle}>loading more</Button>\n      </div>\n    ) : null;\n\n    return (\n        <div className='page'>\n            <Search\n                className='seach-input'\n                placeholder=\"input search text\"\n                onSearch={onSearchHandle}\n                style={{ width: 520 }}\n            />\n            <List\n                className='seach-display'\n                loading={loading}\n                loadMore={loadMore}\n                itemLayout=\"horizontal\"\n                grid={{ gutter: 16, column: 4 }}\n                dataSource={displayImgs}\n                renderItem={(item: DislayType) => (\n                    <List.Item>\n                        <img alt={item.title} width={272} src={item.path}></img>\n                    </List.Item>\n                )}\n            />\n        </div>\n    );\n};\n\n\nexport default SearchImage;\n","import React from 'react';\nimport './App.less';\n\nimport Search from './components/Search'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}